version: 2.1
orbs:
  node: circleci/node@5.0.2
  browser-tools: circleci/browser-tools@1.4.8
  slack: circleci/slack@4.1
parameters:
  testEnvironment:
      type: string
      default: "testParallel"
  testExecKey:
      type: string
      default: "none"
jobs:
  eslint-check:
    working_directory: ~/tidepool-org/webuitests
    docker:
      - image: cimg/node:lts
    steps:
      - checkout
      - node/install
      - run: npm install
      - run: npm run eslint
  test:
    working_directory: ~/tidepool-org/webuitests
    docker: 
      - image: cimg/node:lts-browsers
    environment:
      TEST_EXECUTION_KEY: << pipeline.parameters.testExecKey >>
    steps:
      - checkout
      - browser-tools/install-browser-tools
      - node/install
      - run:
          name: Install xmllint
          command: sudo apt-get update && sudo apt-get install -y libxml2-utils
      - run: node --version
      - run: npm install
      - save_cache:
          paths:
            - ./node_modules
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Run Parallel Tests on Chosen Environments
          command: npm run << pipeline.parameters.testEnvironment >>
      - run:
          name: Consolidate Test Report
          command: npm run merge-reports
          when: always
      - store_artifacts:
          path: tests_output/nightwatch-html-report
      - store_artifacts:
          path: vrt/latest
      - store_artifacts:
          path: vrt/diff
      - store_artifacts:
          path: vrt/baseline/ui
      - store_test_results:
          path: tests_output/testresults.xml
      - store_artifacts:
          path: tests_output/testresults.xml
      - run:
          name: Parse Test Results
          command: |
            TOTAL_TESTS=$(xmllint --xpath "string(/testsuites/@tests)" tests_output/testresults.xml)
            FAILURES=$(xmllint --xpath "string(/testsuites/@failures)" tests_output/testresults.xml)
            ERRORS=$(xmllint --xpath "string(/testsuites/@errors)" tests_output/testresults.xml)
            PASSED_TESTS=$((TOTAL_TESTS - FAILURES - ERRORS))
            echo "export TOTAL_TESTS=$TOTAL_TESTS" >> $BASH_ENV
            echo "export PASSED_TESTS=$PASSED_TESTS" >> $BASH_ENV
            echo "export FAILURES=$FAILURES" >> $BASH_ENV
            echo "export ERRORS=$ERRORS" >> $BASH_ENV
          when: always
      - slack/notify:
          event: fail
          branch_pattern: main
          mentions: '<@UG56AQFK2>'
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*:x: Tidepool Web UI Tests Failed* :sad_tapani: \n\n *Summary:* \n *$PASSED_TESTS/$TOTAL_TESTS tests passed* \n *$FAILURES tests failed* \n *$ERRORS errors encountered* \n\n :link: *<${CIRCLE_BUILD_URL}|View CircleCI Build Details>* \n\n :exclamation: *Please confirm resolution details.*"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "checkboxes",
                      "options": [
                        {
                          "text": {
                            "type": "plain_text",
                            "text": "Confirmed defect :x:",
                            "emoji": true
                          },
                          "description": {
                            "type": "plain_text",
                            "text": "This failure has been vetted and confirmed a defect.",
                            "emoji": true
                          },
                          "value": "value-0"
                        },
                        {
                          "text": {
                            "type": "plain_text",
                            "text": "Expected change :white_check_mark:",
                            "emoji": true
                          },
                          "description": {
                            "type": "plain_text",
                            "text": "This failure has been due to an expected product change. \n Corresponding tests need to be updated.",
                            "emoji": true
                          },
                          "value": "value-1"
                        },
                        {
                          "text": {
                            "type": "plain_text",
                            "text": "Development run :female-technologist:",
                            "emoji": true
                          },
                          "description": {
                            "type": "plain_text",
                            "text": "This failure was produced during a development run of these tests. \n Pay no mind.",
                            "emoji": true
                          },
                          "value": "value-2"
                        },
                        {
                          "text": {
                            "type": "plain_text",
                            "text": "Unreliable test :warning:",
                            "emoji": true
                          },
                          "description": {
                            "type": "plain_text",
                            "text": "This failure was due to an unreliable test. \n The test will need to be modified or removed.",
                            "emoji": true
                          },
                            "value": "value-3"
                        }
                      ],
                      "action_id": "actionId-0"
                    }
                  ]
                }
              ]
            }
      - slack/notify:
          event: pass
          branch_pattern: main
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*:white_check_mark: Tidepool Web UI Tests Passed!* :catjam:  \n\n *Summary:* \n *$PASSED_TESTS/$TOTAL_TESTS tests passed* \n\n :link: *<${CIRCLE_BUILD_URL}|View CircleCI Build Details>*"
                  }
                }
              ]
            }
      - unless:
          condition:
            and:
              - equal: ["testParallel", << pipeline.parameters.testEnvironment >> ]
          steps:
          - run:
              name: Gather Test Evidence
              command: node utilities/browserstackEvidenceDownload.js
              when: always
          - run:
              name: Get API token
              command: |
                echo export token=$(curl -H "Content-Type: application/json" -X POST --data "{ \"client_id\": \"$CLIENT_ID\",\"client_secret\": \"$CLIENT_SECRET\" }" https://xray.cloud.getxray.app/api/v1/authenticate| tr -d '"') >> $BASH_ENV
                source $BASH_ENV
              when: always
          - run: 
              name: Send Results to XRAY
              command: 'curl -H "Content-Type: text/xml" -H "Authorization: Bearer $token" --data @tests_output/testresults.xml  "https://xray.cloud.getxray.app/api/v1/import/execution/junit?testExecKey=<< pipeline.parameters.testExecKey >>"'
              when: always
          - run:
              name: Add Test Evidence to JIRA
              command: node utilities/sendTestEvidenceToJira.js
              when: always
workflows:
  commit-workflow:
    jobs:
      - eslint-check
      - test:
          requires:
            - eslint-check
  scheduled-workflow:
    triggers:
      - schedule:
          filters:
            branches:
              only:
                - main
          cron: "0 8 * * *"
    jobs:
      - test
